# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generated_from_proto.eventManager_pb2 as eventManager__pb2


class EventManagerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEventListAsync = channel.unary_unary(
                '/EventManagerService/GetEventListAsync',
                request_serializer=eventManager__pb2.Empty.SerializeToString,
                response_deserializer=eventManager__pb2.Events.FromString,
                )
        self.GetEventByIdAsync = channel.unary_unary(
                '/EventManagerService/GetEventByIdAsync',
                request_serializer=eventManager__pb2.GetByEventId.SerializeToString,
                response_deserializer=eventManager__pb2.EventDetails.FromString,
                )
        self.CreateEventAsync = channel.unary_unary(
                '/EventManagerService/CreateEventAsync',
                request_serializer=eventManager__pb2.CreateNewEvent.SerializeToString,
                response_deserializer=eventManager__pb2.EventDetails.FromString,
                )
        self.UpdateEventAsync = channel.unary_unary(
                '/EventManagerService/UpdateEventAsync',
                request_serializer=eventManager__pb2.UpdateEvent.SerializeToString,
                response_deserializer=eventManager__pb2.EventDetails.FromString,
                )
        self.DeleteEventAsync = channel.unary_unary(
                '/EventManagerService/DeleteEventAsync',
                request_serializer=eventManager__pb2.DeleteEventRequest.SerializeToString,
                response_deserializer=eventManager__pb2.DeleteEventResponse.FromString,
                )


class EventManagerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetEventListAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventByIdAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEventAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEventAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEventAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEventListAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEventListAsync,
                    request_deserializer=eventManager__pb2.Empty.FromString,
                    response_serializer=eventManager__pb2.Events.SerializeToString,
            ),
            'GetEventByIdAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEventByIdAsync,
                    request_deserializer=eventManager__pb2.GetByEventId.FromString,
                    response_serializer=eventManager__pb2.EventDetails.SerializeToString,
            ),
            'CreateEventAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEventAsync,
                    request_deserializer=eventManager__pb2.CreateNewEvent.FromString,
                    response_serializer=eventManager__pb2.EventDetails.SerializeToString,
            ),
            'UpdateEventAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEventAsync,
                    request_deserializer=eventManager__pb2.UpdateEvent.FromString,
                    response_serializer=eventManager__pb2.EventDetails.SerializeToString,
            ),
            'DeleteEventAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEventAsync,
                    request_deserializer=eventManager__pb2.DeleteEventRequest.FromString,
                    response_serializer=eventManager__pb2.DeleteEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EventManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventManagerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetEventListAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EventManagerService/GetEventListAsync',
            eventManager__pb2.Empty.SerializeToString,
            eventManager__pb2.Events.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEventByIdAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EventManagerService/GetEventByIdAsync',
            eventManager__pb2.GetByEventId.SerializeToString,
            eventManager__pb2.EventDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateEventAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EventManagerService/CreateEventAsync',
            eventManager__pb2.CreateNewEvent.SerializeToString,
            eventManager__pb2.EventDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEventAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EventManagerService/UpdateEventAsync',
            eventManager__pb2.UpdateEvent.SerializeToString,
            eventManager__pb2.EventDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteEventAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EventManagerService/DeleteEventAsync',
            eventManager__pb2.DeleteEventRequest.SerializeToString,
            eventManager__pb2.DeleteEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
